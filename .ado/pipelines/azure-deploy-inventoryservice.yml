# POC of "deploy a single service to AKS" pipeline

name: '$(BuildDefinitionName).$(DayOfYear)$(Rev:.r)'

trigger: none

pr: none

pool:
# hard-code to adt002 for now, must be updated later to use the target env drop-down
  name: 'adt002-private-agents'

variables:
- name: 'synopsys_project_name'
  value: 'DigAPB'
- template: config/configuration.yaml # contains version numbers and global configuration settings
- name:  'workingDirectory'    # Terraform root working directory
  value: 'src/infra/workload'
- name:  'azureServiceConnection' # environment specific service connection
  value: 'az-np-svc-609-DigAPB-ADT'
- name:  'environment' # set the environment name as variable
  value: 'adt002' #update this later to be dynamic

- template: config/variables-values-${{ variables.environment }}.yaml # contains environment-specific values (non-secret)

stages:
# download the needed tfoutput files from the main adt pipeline
#specific pipeline artifact - published
#terraformOutputGlocalInfra
#terraformOutputReleaseUnitInfra
# into into ${{ parameters.workingDirectory }}
- stage: download_artifacts_from_infra_release_pipeline
  displayName: 'Download tf artifacts from Infra Build'
  jobs:
  - job: get_infra_tfoutput
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'specific'
        project: 'b5cf4ec3-b4b5-4309-8c4c-d6628fcae0d8'
        definition: '1820'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'specific'
        pipelineId: '7259'
        artifactName: 'terraformOutputGlobalInfra'
        targetPath: '$(Build.SourcesDirectory)/terraformOutputGlobalInfra'
    
    - publish: '$(Build.SourcesDirectory)/terraformOutputGlobalInfra/GlobalInfra-tfoutput.json'
      artifact: 'terraformOutputGlobalInfra' # artifact name
      displayName: 'Publish Global Terraform Outputs JSON' 

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'specific'
        project: 'b5cf4ec3-b4b5-4309-8c4c-d6628fcae0d8'
        definition: '1820'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'specific'
        pipelineId: '7259'
        artifactName: 'terraformOutputReleaseUnitInfra'
        targetPath: '$(Build.SourcesDirectory)/terraformOutputReleaseUnitInfra'

    - publish: '$(Build.SourcesDirectory)/terraformOutputReleaseUnitInfra/ReleaseUnitInfra-tfoutput.json'
      artifact: 'terraformOutputReleaseUnitInfra' # artifact name
      displayName: 'Publish Release Unit Terraform Outputs JSON' 

    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     PathtoPublish: $(Pipeline.Workspace)
    #     ArtifactName: 'drop'
    #     publishLocation: 'Container'

- stage: setglobalvars
  displayName: 'Set environment variables'
  jobs:
  - job: aparsevars
    steps:
    - checkout: none
      clean: false
    - template: templates/steps-set-pipeline-variables.yaml # load the set-pipeline-variables function (used for tags and prefixes)

# test app code
- stage: testcode
  displayName: 'Test Application Code'
  jobs:
  - template: templates/jobs-code-tests.yaml
    parameters:
      jobName:          'CodeTests'
      workingDirectory: 'src/app'


- stage: buildapplication
  displayName: 'Build Inventory Service'
  jobs: 
  # this template already includes the call to parse global tf
  - template: templates/jobs-container-build.yaml
    parameters:
      jobName:                  'inventoryservice' # unique pipeline job name
      containerImageName:       '$(inventoryserviceImageName)'  # container image name for CatalogService
      containerImageDockerFile: '$(inventoryserviceDockerfile)' # dockerfile used to build the CatalogService

- stage: deployworkload # Deploy workload to previously created infrastructure
  displayName: 'Deploy Workload'
  jobs:
  - job: deploycontainerInventoryService
    displayName: 'Deploy InventoryService workload'

    steps:

    - download: current # download pipeline artifacts

    - template: templates/steps-buildagent-prerequisites.yaml

    - template: templates/steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Install workload InventoryService on AKS clusters'
      retryCountOnTaskFailure: 2
      timeoutInMinutes: 20
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/inventoryservice # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
            echo "**************************** REGION: $($stamp.location) ****************************"

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name
            $identityClientId = $stamp.inventoryservice_managed_identity_client_id
            $tenantId = $(az account show --query "tenantId" --output tsv)

            # We are using the list-locations command to retrieve the display name of the region as this is needed for the Cosmos DB SDK's ApplicationRegion parameter
            $region = $(az account list-locations --query "[?name == '$($stamp.location)'].displayName" -o tsv)
            echo "*** Using Azure Region display name $region"

            # Load AKS credentials using --admin to bypass RBAC and interactive logins
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName `
                                   --resource-group $aksClusterResourceGroup `
                                   --overwrite-existing --admin

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            # We are using a wildcard hostname match for nginx (and thus getting a wildcard cert from Let's Encrypt)
            # Therefore we replace the first part of the FQDN with a '*': "foo.bar.example.com" --> "*.bar.example.com"
            $wildcardDomain = $fqdn -replace '^[^.]*','*'
            echo "*** Using wildcard domain name $wildcardDomain"

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/inventoryservice-containerImageName/inventoryservice.txt"
            echo "*** Retrieved full container image name from artifact - $fullContainerImageName"

            # Apply workload InventoryService helm chart
            echo "*** Deploy workload InventoryService to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            echo "*** Using container image $fullContainerImageName"

            # Gather Azure KeyVault name from terraform artifact
            $keyVaultName = $stamp.key_vault_name
            echo "*** Retrieved Key Vault name $keyVaultName"

            $allSecretNames = $(az keyvault secret list --vault-name $keyVaultName --query "join(',',[].name)" --output tsv)
            echo "*** Retrieved the names of $($allSecretNames.Split(',').Count) secrets in Key Vault $keyVaultName"

            helm upgrade --install workload-inventoryservice src/app/charts/inventoryservice `
                         --namespace "$(workloadNamespace)" `
                         --create-namespace `
                         --set azure.region="$region" `
                         --set containerimage="$fullContainerImageName" `
                         --set workload.domainname="$wildcardDomain" `
                         --set identity.clientid="$identityClientId" `
                         --set azure.tenantId=$tenantId `
                         --set azure.keyVaultName="$keyVaultName" `
                         --set kvSecrets="{$allSecretNames}" `
                         --wait
          }